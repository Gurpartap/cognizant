#!/usr/bin/env ruby

# Set the process name.
$0 = File.basename(__FILE__)

# Flush standard output/error immediately.
$stdout.sync = true
$stderr.sync = true

require "cognizant/shell"
require "commander/import"
require "formatador"
require "shellwords"
require "socket"

program :version, Cognizant::VERSION
program :description, "administration utility for cognizantd"

# global_option("-c", "--config FILE", String, "Load config data") do |c|
#   
# end

global_option("-s", "--socket FILE", String, "The socket lock file of the daemon server (default: /var/run/cognizant/cognizantd.sock)") do |s|
end

default_command :shell

command :shell do |c|
  c.syntax = "cognizant shell"
  c.description = "Enter the Cognizant shell for easy control"
  c.action do |args, options|
    Cognizant::Shell.new(socket: options.socket, shell: true).run do |output, cmd|
      if cmd == "shutdown"
        # TODO: Use Shell#emit instead of puts.
        puts "The daemon has been shutdown successfuly."
        exit(0)
      else
        format_status_table(output)
      end
    end
  end
end

command :status do |c|
  c.syntax = "cognizant status [process or group name]"
  c.description = "Display status of managed process(es) or group(s)"
  c.action do |args, options|
    connect_and_perform(:status, options, args) do |output|
      format_status_table(output)
    end
  end
end

[
  [:load,      "FILE",                    "Loads the process information from specified Ruby file"],
  [:monitor,   "[PROCESS OR GROUP NAME]", "Monitor the specified process or group"],
  [:unmonitor, "[PROCESS OR GROUP NAME]", "Unmonitor the specified process or group"],
  [:start,     "[PROCESS OR GROUP NAME]", "Start the specified process or group"],
  [:stop,      "[PROCESS OR GROUP NAME]", "Stop the specified process or group"],
  [:restart,   "[PROCESS OR GROUP NAME]", "Restart the specified process or group"]
].each do |command, arg_name, description|
  eval <<-heredoc
    command "#{command}" do |c|
      c.syntax = "cognizant #{command} #{arg_name}"
      c.description = "#{description}"
      c.action do |args, options|
        connect_and_perform(:#{command}, options, args) do |output|
          format_status_table(output)
        end
      end
    end
  heredoc
end

command "shutdown" do |c|
  c.syntax = "cognizant shutdown"
  c.description = "Stop the monitoring daemon without affecting managed processes"
  c.action do |args, options|
    connect_and_perform(:shutdown, options, args) do |output|
      # 
    end
  end
end

def format_status_table(status_data)
  if status_data.is_a?(Array)
    status_data.each_with_index do |process, index|
      status_data[index]["State"]  = "[green]#{process["State"]}[/] since #{distance_of_time_in_words(Time.now.to_i - process["Since"])}"
      status_data[index]["Memory"] = number_to_human_size(process["Memory"] * 1024) # Convert kilobytes to bytes.
    end

    formatador = Formatador.new
    formatador.display_line
    formatador.display_table(status_data, ["Process", "Group", "State", "PID", "% CPU", "Memory"])
    formatador.display_line(Time.now)
    formatador.display_line
  elsif status_data.is_a?(Hash)
    puts status_data['message']
  end
rescue => e
  Formatador.display_line("[red]#{status_data}[/]")
end

def connect_and_perform(task, options, args, &block)
  Cognizant::Shell.new(socket: options.socket, shell: false).run_command(task, args, &block)
end

def distance_of_time_in_words(seconds)
  minutes = seconds / 60
  return nil if minutes < 0
  case minutes
    when 0               then "less than a minute"
    when 1..59           then pluralize((minutes/1).floor, "minute", "minutes")
    when 60..1439        then pluralize((minutes/60).floor, "hour", "hours")
    when 1440..11519     then pluralize((minutes/1440).floor, "day", "days")
    when 11520..43199    then pluralize((minutes/11520).floor, "week", "weeks")
    when 43200..525599   then pluralize((minutes/43200).floor, "month", "months")  
    else                      pluralize((minutes/525600).floor, "year", "years")
  end
end

SIZE_PREFIX = %w(TiB GiB MiB KiB Bytes).freeze
def number_to_human_size(size)
  size = size.to_f
  i = SIZE_PREFIX.length - 1
  while size > 512 && i > 0
    i -= 1
    size /= 1024
  end
  ((size > 9 || size.modulo(1) < 0.1 ? "%d" : "%.1f") % size) + " " + SIZE_PREFIX[i]
end

def pluralize(count, singular, plural)
  "#{count || 0} " + ((count == 1 || count =~ /^1(\.0+)?$/) ? singular : plural)
end

# exit run(ARGV)
